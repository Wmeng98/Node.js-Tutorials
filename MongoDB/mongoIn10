Node.js MongoDB tutorial with Examples...
******************************************

Node.js frameowrk has ability to work with both 
relational and Non-relational database

mongoDB & MySQL
***************

- ability of these non-relational database
to store any sort of contetn in any
sort of format is what makes these databases so famous

for using mongoDB, the required module
to be installed is "Mongoose"

With these modules, you can perform following operaitons in Node.js
1) Manage the connection pooling

2) Create & close connection to a database 

3) queries can be executed to get data from respective database to retrieve data

4) Data manipulation such as inserting data,
deleting and updating data can also be achieved with these modules



USING MONGODB & NODE.js
************************

How can we establish connections with a MongoDB database?

How can we perform normal operations of reading data from
a database, inert, update, delete record in a mongoDB database?

For chapter purpose assume:
>>> Have EmployeeDB database

Documents
{
	{Employeeid : 1, Employee Name : Guru99},
	{Employeeid : 2, Employee Name : Joe},
	{Employeeid : 3, Employee Name : Martin},
}



1. Installing the NPM modules
*****************************

To access Mongo from within node app, a
driver is required, there are number of mongo drivers
available, but MongoDB among the most popular

"npm install mongodb"


2. Creating & Closing connection to MongoDB database
*****************************************************

var MongoClient = require('mongodb').MongoClient; // using the mongodb driver
var url = 'mongodb://localhost/EmployeeDB'; // specify connection url

// connecting to db
MongoClient.connect(url, function(err, db) {
  console.log("Connected...");
  db.close(); // closing the database connection
});


CODE EXPLANATION....
1. include mongoose module done through the require function

2. specify connection string to dataabse, 3 key values

a) mongodb specifies that we are connecting to a mongoDB database
b) localhost means we are connecting to a database on localmachine
c) EmployeeDB is name of database defined in our MongoDB database

3. actually connect to our db

callback will be called when connection is opened to the db...



3. QUERYING FOR DATA IN  A MONGODB DB
***************************************

Using mongoDB driver, we can also fetch data from the mongoDB database


var MongoClient = require('mongodb').MongoClient;
var url = 'mongodb://localhost/EmployeeDB';

MongoClient.connect(url, function(err, db) {
  var cursor = db.collection('Employee').find();
  cursor.each(function(err, doc) {
    console.log(doc);
  });
});

CODE EXPLANATION....
1. Create a cursor (pointer used to point to various records fetched from a database
which is then used to iterate through diff records in db

here curosr stores pointer to records which are fetched from database

Also specify collection 'Employee' from which to fetch the records

2. Now iterating through our cursor for each doc in cursor we are going to execute a function

3. Func simple logs contents of eahc doc to console.


DATABASE VS. COLLECTION
*********************

MongoDB stores BSON documents(i.e data records) in collections; the collections in databases

Essentially, in MongoDB, databases hold collections of documents

*********************



4. Intersting documents in a collection
***************************************

documents can  also be inserted into a collection
using the insertOne method provided by mongoDB library

var MongoClient = require('mongodb').MongoClient;
var url = 'mongodb://localhost/EmployeeDB';

MongoClient.connect(url, function(err, db) {
  db.collection('Employee').insertOne({ // use insert method to insert a document
    
    // The document to insert in the collection  
    Employeeid: 4,
    EmployeeName: 'NewEmployee'
    // document...
  
  });

});



CODE EXPLANATION....
1. Here we using the insertOne method from MongoDB library to insert
a document into the employee collection

2. We are specifying the document details of what needs to be inserted into
the Employee collection

check contents of MongoDB will find record with the document details in Employee collection


>>> To check data has been propery inserted into db execute following commands...
1. Use EmployeeDB // ensure you connected to EmployeeDB
2. db.Employee.find({Employeeid: 4}) // searches for record


5. Updating Documents In A Collection
***************************************

var MongoClient = require('mongodb').MongoClient
var url = 'mongodb://localhost/EmployeeDB';

MongoClient.connect(url, function(err, db) {
  db.collection('Employee').updateOne(
    {"EmployeeName" : "NewEmployee"},
    {
      $set: {"EmployeeName: "Mohan"}
    }
  });
});


CODE EXPLANATION....
1. Here using the updateOne method from MongoDB library
2. We are specifying search criteria for which doc
needs to be updated. In our case, we want to find document which has
EmployeeName of "NewEmplyoee"

3. Set value of EmployeeName of doc from "NewEmplyoee" to "Mohan"


6. Deleting Documents In A Collection
***************************************

deleteOne method

var MongoClient = reuqire('mongodb').MongoClient;
var url = 'mongodb://localhoist/EmployeeDB';

MongoClient.connect(url, function(err, db) {
  db.collection('Employee').deleteOne(
    {
      "EmployeeName" : "Mohan" // search criteria for which record needs to be deleted
    }
  );
});







*************************************************************************
HOW TO BUILD A NODE EXPRESS APP WITH MONGODB TO STORE AND SERVER CONTENT
*************************************************************************

express and mongoDB quite common nowadays

simple ex making use of same Employee collection in the MongoDB EmployeeDB database


incorporate express to display data on our web page when requested by the user

http://localhost:3000/Employeeid // display all employee id in the employee collection

STEPS....

////////////////////////////////////////////////
1) Define all libraries which need be used in our application
mongoDB and express library in this case...

var express = require('express'); // use express module
var app = express();
var MongoClient = require('mongodb').MongoClient; // using mongodb module

var url = 'mongodv://localhost/EmployeeDB'; // create connection string

var str=""; // creating a variable which will be used in our application
// stores collection of employee id which need to be displayed in browser later...


////////////////////////////////////////////////
2) Get all of the records in our 'Employee' collection and work with them accoridng

app.route('/Employeeid').get(function(req, res) { // create a route for our application
  MongoClient.connect(url, function(err, db) {
    var cursor = db.collection('Employee').find();

    cursor.each(function(err, item) {
      if (item != null) {
        str = str + "&nbsp;&nbsp;&nbsp;&nbsp;Employee id&nbsp;&nbsp;"
        + item.Employeeid + "</br>;
      }
    });
  }); 
});



////////////////////////////////////////////////
3.) Send our output to webpage and make web application listen on particular port




app.route('/Employeeid').get(function(req, res) { // create a route for our application

  MongoClient.connect(url, function(err, db) {
    var cursor = db.collection('Employee').find();

    cursor.each(function(err, item) {
      if (item != null) {
        str = str + "&nbsp;&nbsp;&nbsp;&nbsp;Employee id&nbsp;&nbsp;"
        + item.Employeeid + "</br>;
      }
    });

      // send content of str variable into web page
      res.send(str);

      // Global vs. Local javascript variables
      global is whatever is not inside a function

      //global can be used in all functions in program
      // This also applies to c++ language as well

  }); 
});

// sMake server listen on port 3000
var server = app.listen(3000, function(){});

////////////////////////////////////////////////
